import json
import sqlite3
from datetime import datetime, timedelta

from flask import request


def dict_factory(cursor, row):
    return {col[0]: row[idx] for idx, col in enumerate(cursor.description)}


class DATABASE:

    def __init__(self):
        self.conn = sqlite3.connect("logs.db", check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self.cursor = self.conn.cursor()
        self.create_alert_conn()
        self.create_flow_conn()
        self.create_stat_conn()

    def create_alert_conn(self):
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS alerts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            
            -- Top-level properties
            "timestamp" TIMESTAMPTZ,
            flow_id BIGINT,
            in_iface TEXT,
            event_type TEXT,
            src_ip TEXT,
            src_port INTEGER,
            dest_ip TEXT,
            dest_port INTEGER,
            proto TEXT,
            pkt_src TEXT,
            
            -- Flattened "alert" object properties
            alert_action TEXT,
            alert_gid INTEGER,
            alert_signature_id INTEGER,
            alert_rev INTEGER,
            alert_signature TEXT,
            alert_category TEXT,
            alert_severity INTEGER,
            -- For metadata arrays, you might store as TEXT (JSON string) or ARRAY; here we store as TEXT.
            metadata_affected_product TEXT,
            metadata_attack_target TEXT,
            metadata_confidence TEXT,
            metadata_created_at TEXT,
            metadata_deployment TEXT,
            metadata_performance_impact TEXT,
            metadata_signature_severity TEXT,
            metadata_updated_at TEXT,
            
            -- Other top-level properties
            app_proto TEXT,
            direction TEXT,
            
            -- Flattened "flow" object properties
            flow_pkts_toserver INTEGER,
            flow_pkts_toclient INTEGER,
            flow_bytes_toserver INTEGER,
            flow_bytes_toclient INTEGER,
            flow_start TIMESTAMPTZ,
            flow_src_ip TEXT,
            flow_dest_ip TEXT,
            flow_src_port INTEGER,
            flow_dest_port INTEGER
        );
        """)
        self.conn.commit()

    def insert_alert(self, alert):
        timestamp = alert.get("timestamp", None)
        flow_id = alert.get("flow_id", None)
        in_iface = alert.get("in_iface", None)
        event_type = alert.get("event_type", None)
        src_ip = alert.get("src_ip", None)
        src_port = alert.get("src_port", None)
        dest_ip = alert.get("dest_ip", None)
        dest_port = alert.get("dest_port", None)
        proto = alert.get("proto", None)
        pkt_src = alert.get("pkt_src", None)

        # Flattened alert properties
        alert_action = alert.get("alert", {}).get("action", None)
        alert_gid = alert.get("alert", {}).get("gid", None)
        alert_signature_id = alert.get("alert", {}).get("signature_id", None)
        alert_rev = alert.get("alert", {}).get("rev", None)
        alert_signature = alert.get("alert", {}).get("signature", None)
        alert_category = alert.get("alert", {}).get("category", None)
        alert_severity = alert.get("alert", {}).get("severity", None)

        # For metadata arrays, we store them as JSON strings
        metadata_affected_product = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("affected_product", None)
        )
        metadata_attack_target = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("attack_target", None)
        )
        metadata_confidence = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("confidence", None)
        )
        metadata_created_at = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("created_at", None)
        )
        metadata_deployment = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("deployment", None)
        )
        metadata_performance_impact = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("performance_impact", None)
        )
        metadata_signature_severity = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("signature_severity", None)
        )
        metadata_updated_at = json.dumps(
            alert.get("alert", {}).get("metadata", {}).get("updated_at", None)
        )

        # Other top-level properties
        app_proto = alert.get("app_proto", None)
        direction = alert.get("direction", None)

        # Flattened flow properties
        flow_pkts_toserver = alert.get("flow", {}).get("pkts_toserver", None)
        flow_pkts_toclient = alert.get("flow", {}).get("pkts_toclient", None)
        flow_bytes_toserver = alert.get("flow", {}).get("bytes_toserver", None)
        flow_bytes_toclient = alert.get("flow", {}).get("bytes_toclient", None)
        flow_start = alert.get("flow", {}).get("start", None)
        flow_src_ip = alert.get("flow", {}).get("src_ip", None)
        flow_dest_ip = alert.get("flow", {}).get("dest_ip", None)
        flow_src_port = alert.get("flow", {}).get("src_port", None)
        flow_dest_port = alert.get("flow", {}).get("dest_port", None)

        insert_query = """
            INSERT INTO alerts (
                "timestamp",
                flow_id,
                in_iface,
                event_type,
                src_ip,
                src_port,
                dest_ip,
                dest_port,
                proto,
                pkt_src,
                alert_action,
                alert_gid,
                alert_signature_id,
                alert_rev,
                alert_signature,
                alert_category,
                alert_severity,
                metadata_affected_product,
                metadata_attack_target,
                metadata_confidence,
                metadata_created_at,
                metadata_deployment,
                metadata_performance_impact,
                metadata_signature_severity,
                metadata_updated_at,
                app_proto,
                direction,
                flow_pkts_toserver,
                flow_pkts_toclient,
                flow_bytes_toserver,
                flow_bytes_toclient,
                flow_start,
                flow_src_ip,
                flow_dest_ip,
                flow_src_port,
                flow_dest_port
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?
            );
            """

        # Build the parameters tuple in proper order
        params = (
            timestamp,
            flow_id,
            in_iface,
            event_type,
            src_ip,
            src_port,
            dest_ip,
            dest_port,
            proto,
            pkt_src,
            alert_action,
            alert_gid,
            alert_signature_id,
            alert_rev,
            alert_signature,
            alert_category,
            alert_severity,
            metadata_affected_product,
            metadata_attack_target,
            metadata_confidence,
            metadata_created_at,
            metadata_deployment,
            metadata_performance_impact,
            metadata_signature_severity,
            metadata_updated_at,
            app_proto,
            direction,
            flow_pkts_toserver,
            flow_pkts_toclient,
            flow_bytes_toserver,
            flow_bytes_toclient,
            flow_start,
            flow_src_ip,
            flow_dest_ip,
            flow_src_port,
            flow_dest_port,
        )

        self.cursor.execute(insert_query, params)

        self.conn.commit()

    def create_flow_conn(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS flows (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                flow_id INTEGER,
                in_iface TEXT,
                event_type TEXT,
                src_ip TEXT,
                src_port INTEGER,
                dest_ip TEXT,
                dest_port INTEGER,
                proto TEXT,
                app_proto TEXT,
                pkts_toserver INTEGER,
                pkts_toclient INTEGER,
                bytes_toserver INTEGER,
                bytes_toclient INTEGER,
                flow_start TEXT,
                flow_end TEXT,
                flow_age INTEGER,
                flow_state TEXT,
                flow_reason TEXT,
                flow_alerted TEXT
            );
            """)
        self.conn.commit()

    def insert_flow(self, flow):
        values = {
            "timestamp": flow.get("timestamp", None),
            "flow_id": flow.get("flow_id", None),
            "in_iface": flow.get("in_iface", None),
            "event_type": flow.get("event_type", None),
            "src_ip": flow.get("src_ip", None),
            "src_port": flow.get("src_port", None),
            "dest_ip": flow.get("dest_ip", None),
            "dest_port": flow.get("dest_port", None),
            "proto": flow.get("proto", None),
            "app_proto": flow.get("app_proto", None),
            "pkts_toserver": flow.get("flow", {}).get("pkts_toserver", None),
            "pkts_toclient": flow.get("flow", {}).get("pkts_toclient", None),
            "bytes_toserver": flow.get("flow", {}).get("bytes_toserver", None),
            "bytes_toclient": flow.get("flow", {}).get("bytes_toclient", None),
            "flow_start": flow.get("flow", {}).get("start", None),
            "flow_end": flow.get("flow", {}).get("end", None),
            "flow_age": flow.get("flow", {}).get("age", None),
            "flow_state": flow.get("flow", {}).get("state", None),
            "flow_reason": flow.get("flow", {}).get("reason", None),
            "flow_alerted": flow.get("flow", {}).get("alerted", None)  # SQLite doesn't have a boolean type
        }

        insert_query = """INSERT INTO flows (
            timestamp, flow_id, in_iface, event_type, src_ip, src_port, dest_ip,
            dest_port, proto, app_proto, pkts_toserver, pkts_toclient, bytes_toserver,
            bytes_toclient, flow_start, flow_end, flow_age, flow_state, flow_reason, flow_alerted
        ) VALUES (
            :timestamp, :flow_id, :in_iface, :event_type, :src_ip, :src_port, :dest_ip,
            :dest_port, :proto, :app_proto, :pkts_toserver, :pkts_toclient, :bytes_toserver,
            :bytes_toclient, :flow_start, :flow_end, :flow_age, :flow_state, :flow_reason, :flow_alerted
        );
        """
        # print(insert_query)

        self.conn.commit()

        self.cursor.execute(insert_query, values)
        self.conn.commit()

    def create_stat_conn(self):
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS stats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TIMESTAMP,
    event_type VARCHAR(50),
    stats_uptime INT,
    stats_capture_kernel_packets INT,
    stats_capture_kernel_drops INT,
    stats_capture_errors INT,
    stats_capture_afpacket_busy_loop_avg INT,
    stats_capture_afpacket_polls INT,
    stats_capture_afpacket_poll_signal INT,
    stats_capture_afpacket_poll_timeout INT,
    stats_capture_afpacket_poll_data INT,
    stats_capture_afpacket_poll_errors INT,
    stats_capture_afpacket_send_errors INT,
    stats_decoder_pkts INT,
    stats_decoder_bytes INT,
    stats_decoder_invalid INT,
    stats_decoder_ipv4 INT,
    stats_decoder_ipv6 INT,
    stats_decoder_ethernet INT,
    stats_decoder_arp INT,
    stats_decoder_unknown_ethertype INT,
    stats_decoder_chdlc INT,
    stats_decoder_raw INT,
    stats_decoder_null INT,
    stats_decoder_sll INT,
    stats_decoder_tcp INT,
    stats_decoder_udp INT,
    stats_decoder_sctp INT,
    stats_decoder_esp INT,
    stats_decoder_icmpv4 INT,
    stats_decoder_icmpv6 INT,
    stats_decoder_ppp INT,
    stats_decoder_pppoe INT,
    stats_decoder_geneve INT,
    stats_decoder_gre INT,
    stats_decoder_vlan INT,
    stats_decoder_vlan_qinq INT,
    stats_decoder_vlan_qinqinq INT,
    stats_decoder_vxlan INT,
    stats_decoder_vntag INT,
    stats_decoder_ieee8021ah INT,
    stats_decoder_teredo INT,
    stats_decoder_ipv4_in_ipv6 INT,
    stats_decoder_ipv6_in_ipv6 INT,
    stats_decoder_mpls INT,
    stats_decoder_avg_pkt_size INT,
    stats_decoder_max_pkt_size INT,
    stats_decoder_max_mac_addrs_src INT,
    stats_decoder_max_mac_addrs_dst INT,
    stats_decoder_erspan INT,
    stats_decoder_nsh INT,
    stats_decoder_event_afpacket_trunc_pkt INT,
    stats_decoder_event_ipv4_pkt_too_small INT,
    stats_decoder_event_ipv4_hlen_too_small INT,
    stats_decoder_event_ipv4_iplen_smaller_than_hlen INT,
    stats_decoder_event_ipv4_trunc_pkt INT,
    stats_decoder_event_ipv4_opt_invalid INT,
    stats_decoder_event_ipv4_opt_invalid_len INT,
    stats_decoder_event_ipv4_opt_malformed INT,
    stats_decoder_event_ipv4_opt_pad_required INT,
    stats_decoder_event_ipv4_opt_eol_required INT,
    stats_decoder_event_ipv4_opt_duplicate INT,
    stats_decoder_event_ipv4_opt_unknown INT,
    stats_decoder_event_ipv4_wrong_ip_version INT,
    stats_decoder_event_ipv4_icmpv6 INT,
    stats_decoder_event_ipv4_frag_pkt_too_large INT,
    stats_decoder_event_ipv4_frag_overlap INT,
    stats_decoder_event_ipv4_frag_ignored INT,
    stats_decoder_event_icmpv4_pkt_too_small INT,
    stats_decoder_event_icmpv4_unknown_type INT,
    stats_decoder_event_icmpv4_unknown_code INT,
    stats_decoder_event_icmpv4_ipv4_trunc_pkt INT,
    stats_decoder_event_icmpv4_ipv4_unknown_ver INT,
    stats_decoder_event_icmpv6_unknown_type INT,
    stats_decoder_event_icmpv6_unknown_code INT,
    stats_decoder_event_icmpv6_pkt_too_small INT,
    stats_decoder_event_icmpv6_ipv6_unknown_version INT,
    stats_decoder_event_icmpv6_ipv6_trunc_pkt INT,
    stats_decoder_event_icmpv6_mld_message_with_invalid_hl INT,
    stats_decoder_event_icmpv6_unassigned_type INT,
    stats_decoder_event_icmpv6_experimentation_type INT,
    stats_decoder_event_ipv6_pkt_too_small INT,
    stats_decoder_event_ipv6_trunc_pkt INT,
    stats_decoder_event_ipv6_trunc_exthdr INT,
    stats_decoder_event_ipv6_exthdr_dupl_fh INT,
    stats_decoder_event_ipv6_exthdr_useless_fh INT,
    stats_decoder_event_ipv6_exthdr_dupl_rh INT,
    stats_decoder_event_ipv6_exthdr_dupl_hh INT,
    stats_decoder_event_ipv6_exthdr_dupl_dh INT,
    stats_decoder_event_ipv6_exthdr_dupl_ah INT,
    stats_decoder_event_ipv6_exthdr_dupl_eh INT,
    stats_decoder_event_ipv6_exthdr_invalid_optlen INT,
    stats_decoder_event_ipv6_wrong_ip_version INT,
    stats_decoder_event_ipv6_exthdr_ah_res_not_null INT,
    stats_decoder_event_ipv6_hopopts_unknown_opt INT,
    stats_decoder_event_ipv6_hopopts_only_padding INT,
    stats_decoder_event_ipv6_dstopts_unknown_opt INT,
    stats_decoder_event_ipv6_dstopts_only_padding INT,
    stats_decoder_event_ipv6_rh_type_0 INT,
    stats_decoder_event_ipv6_zero_len_padn INT,
    stats_decoder_event_ipv6_fh_non_zero_reserved_field INT,
    stats_decoder_event_ipv6_data_after_none_header INT,
    stats_decoder_event_ipv6_unknown_next_header INT,
    stats_decoder_event_ipv6_icmpv4 INT,
    stats_decoder_event_ipv6_frag_pkt_too_large INT,
    stats_decoder_event_ipv6_frag_overlap INT,
    stats_decoder_event_ipv6_frag_invalid_length INT,
    stats_decoder_event_ipv6_frag_ignored INT,
    stats_decoder_event_ipv6_ipv4_in_ipv6_too_small INT,
    stats_decoder_event_ipv6_ipv4_in_ipv6_wrong_version INT,
    stats_decoder_event_ipv6_ipv6_in_ipv6_too_small INT,
    stats_decoder_event_ipv6_ipv6_in_ipv6_wrong_version INT,
    stats_decoder_event_tcp_pkt_too_small INT,
    stats_decoder_event_tcp_hlen_too_small INT,
    stats_decoder_event_tcp_invalid_optlen INT,
    stats_decoder_event_tcp_opt_invalid_len INT,
    stats_decoder_event_tcp_opt_duplicate INT,
    stats_decoder_event_udp_pkt_too_small INT,
    stats_decoder_event_udp_hlen_too_small INT,
    stats_decoder_event_udp_hlen_invalid INT,
    stats_decoder_event_udp_len_invalid INT,
    stats_decoder_event_sll_pkt_too_small INT,
    stats_decoder_event_ethernet_pkt_too_small INT,
    stats_decoder_event_ppp_pkt_too_small INT,
    stats_decoder_event_ppp_vju_pkt_too_small INT,
    stats_decoder_event_ppp_ip4_pkt_too_small INT,
    stats_decoder_event_ppp_ip6_pkt_too_small INT,
    stats_decoder_event_ppp_wrong_type INT,
    stats_decoder_event_ppp_unsup_proto INT,
    stats_decoder_event_pppoe_pkt_too_small INT,
    stats_decoder_event_pppoe_wrong_code INT,
    stats_decoder_event_pppoe_malformed_tags INT,
    stats_decoder_event_gre_pkt_too_small INT,
    stats_decoder_event_gre_wrong_version INT,
    stats_decoder_event_gre_version0_recur INT,
    stats_decoder_event_gre_version0_flags INT,
    stats_decoder_event_gre_version0_hdr_too_big INT,
    stats_decoder_event_gre_version0_malformed_sre_hdr INT,
    stats_decoder_event_gre_version1_chksum INT,
    stats_decoder_event_gre_version1_route INT,
    stats_decoder_event_gre_version1_ssr INT,
    stats_decoder_event_gre_version1_recur INT,
    stats_decoder_event_gre_version1_flags INT,
    stats_decoder_event_gre_version1_no_key INT,
    stats_decoder_event_gre_version1_wrong_protocol INT,
    stats_decoder_event_gre_version1_malformed_sre_hdr INT,
    stats_decoder_event_gre_version1_hdr_too_big INT,
    stats_decoder_event_vlan_header_too_small INT,
    stats_decoder_event_vlan_unknown_type INT,
    stats_decoder_event_vlan_too_many_layers INT,
    stats_decoder_event_ieee8021ah_header_too_small INT,
    stats_decoder_event_vntag_header_too_small INT,
    stats_decoder_event_vntag_unknown_type INT,
    stats_decoder_event_ipraw_invalid_ip_version INT,
    stats_decoder_event_ltnull_pkt_too_small INT,
    stats_decoder_event_ltnull_unsupported_type INT,
    stats_decoder_event_sctp_pkt_too_small INT,
    stats_decoder_event_esp_pkt_too_small INT,
    stats_decoder_event_mpls_header_too_small INT,
    stats_decoder_event_mpls_pkt_too_small INT,
    stats_decoder_event_mpls_bad_label_router_alert INT,
    stats_decoder_event_mpls_bad_label_implicit_null INT,
    stats_decoder_event_mpls_bad_label_reserved INT,
    stats_decoder_event_mpls_unknown_payload_type INT,
    stats_decoder_event_vxlan_unknown_payload_type INT,
    stats_decoder_event_geneve_unknown_payload_type INT,
    stats_decoder_event_erspan_header_too_small INT,
    stats_decoder_event_erspan_unsupported_version INT,
    stats_decoder_event_erspan_too_many_vlan_layers INT,
    stats_decoder_event_dce_pkt_too_small INT,
    stats_decoder_event_chdlc_pkt_too_small INT,
    stats_decoder_event_nsh_header_too_small INT,
    stats_decoder_event_nsh_unsupported_version INT,
    stats_decoder_event_nsh_bad_header_length INT,
    stats_decoder_event_nsh_reserved_type INT,
    stats_decoder_event_nsh_unsupported_type INT,
    stats_decoder_event_nsh_unknown_payload INT,
    stats_decoder_too_many_layers INT,
    stats_tcp_syn INT,
    stats_tcp_synack INT,
    stats_tcp_rst INT,
    stats_tcp_urg INT,
    stats_tcp_active_sessions INT,
    stats_tcp_sessions INT,
    stats_tcp_ssn_memcap_drop INT,
    stats_tcp_ssn_from_cache INT,
    stats_tcp_ssn_from_pool INT,
    stats_tcp_pseudo INT,
    stats_tcp_pseudo_failed INT,
    stats_tcp_invalid_checksum INT,
    stats_tcp_midstream_pickups INT,
    stats_tcp_pkt_on_wrong_thread INT,
    stats_tcp_ack_unseen_data INT,
    stats_tcp_segment_memcap_drop INT,
    stats_tcp_segment_from_cache INT,
    stats_tcp_segment_from_pool INT,
    stats_tcp_stream_depth_reached INT,
    stats_tcp_reassembly_gap INT,
    stats_tcp_overlap INT,
    stats_tcp_overlap_diff_data INT,
    stats_tcp_insert_data_normal_fail INT,
    stats_tcp_insert_data_overlap_fail INT,
    stats_tcp_urgent_oob_data INT,
    stats_tcp_memuse INT,
    stats_tcp_reassembly_memuse INT,
    stats_flow_memcap INT,
    stats_flow_total INT,
    stats_flow_active INT,
    stats_flow_tcp INT,
    stats_flow_udp INT,
    stats_flow_icmpv4 INT,
    stats_flow_icmpv6 INT,
    stats_flow_tcp_reuse INT,
    stats_flow_get_used INT,
    stats_flow_get_used_eval INT,
    stats_flow_get_used_eval_reject INT,
    stats_flow_get_used_eval_busy INT,
    stats_flow_get_used_failed INT,
    stats_flow_wrk_spare_sync_avg INT,
    stats_flow_wrk_spare_sync INT,
    stats_flow_wrk_spare_sync_incomplete INT,
    stats_flow_wrk_spare_sync_empty INT,
    stats_flow_wrk_flows_evicted_needs_work INT,
    stats_flow_wrk_flows_evicted_pkt_inject INT,
    stats_flow_wrk_flows_evicted INT,
    stats_flow_wrk_flows_injected INT,
    stats_flow_wrk_flows_injected_max INT,
    stats_flow_end_state_new INT,
    stats_flow_end_state_established INT,
    stats_flow_end_state_closed INT,
    stats_flow_end_state_local_bypassed INT,
    stats_flow_end_state_capture_bypassed INT,
    stats_flow_end_tcp_state_none INT,
    stats_flow_end_tcp_state_syn_sent INT,
    stats_flow_end_tcp_state_syn_recv INT,
    stats_flow_end_tcp_state_established INT,
    stats_flow_end_tcp_state_fin_wait1 INT,
    stats_flow_end_tcp_state_fin_wait2 INT,
    stats_flow_end_tcp_state_time_wait INT,
    stats_flow_end_tcp_state_last_ack INT,
    stats_flow_end_tcp_state_close_wait INT,
    stats_flow_end_tcp_state_closing INT,
    stats_flow_end_tcp_state_closed INT,
    stats_flow_end_tcp_liberal INT,
    stats_flow_mgr_full_hash_pass INT,
    stats_flow_mgr_rows_per_sec INT,
    stats_flow_mgr_rows_maxlen INT,
    stats_flow_mgr_flows_checked INT,
    stats_flow_mgr_flows_notimeout INT,
    stats_flow_mgr_flows_timeout INT,
    stats_flow_mgr_flows_evicted INT,
    stats_flow_mgr_flows_evicted_needs_work INT,
    stats_flow_spare INT,
    stats_flow_emerg_mode_entered INT,
    stats_flow_emerg_mode_over INT,
    stats_flow_recycler_recycled INT,
    stats_flow_recycler_queue_avg INT,
    stats_flow_recycler_queue_max INT,
    stats_flow_memuse INT,
    stats_defrag_ipv4_fragments INT,
    stats_defrag_ipv4_reassembled INT,
    stats_defrag_ipv6_fragments INT,
    stats_defrag_ipv6_reassembled INT,
    stats_defrag_max_frag_hits INT,
    stats_flow_bypassed_local_pkts INT,
    stats_flow_bypassed_local_bytes INT,
    stats_flow_bypassed_local_capture_pkts INT,
    stats_flow_bypassed_local_capture_bytes INT,
    stats_flow_bypassed_closed INT,
    stats_flow_bypassed_pkts INT,
    stats_flow_bypassed_bytes INT,
    stats_detect_engines_0_id INT,
    stats_detect_engines_0_last_reload VARCHAR(50),
    stats_detect_engines_0_rules_loaded INT,
    stats_detect_engines_0_rules_failed INT,
    stats_detect_engines_0_rules_skipped INT,
    stats_detect_alert INT,
    stats_detect_alert_queue_overflow INT,
    stats_detect_alerts_suppressed INT,
    stats_app_layer_flow_http INT,
    stats_app_layer_flow_ftp INT,
    stats_app_layer_flow_smtp INT,
    stats_app_layer_flow_tls INT,
    stats_app_layer_flow_ssh INT,
    stats_app_layer_flow_imap INT,
    stats_app_layer_flow_smb INT,
    stats_app_layer_flow_dcerpc_tcp INT,
    stats_app_layer_flow_dns_tcp INT,
    stats_app_layer_flow_nfs_tcp INT,
    stats_app_layer_flow_ntp INT,
    stats_app_layer_flow_ftp_data INT,
    stats_app_layer_flow_tftp INT,
    stats_app_layer_flow_ike INT,
    stats_app_layer_flow_krb5_tcp INT,
    stats_app_layer_flow_quic INT,
    stats_app_layer_flow_dhcp INT,
    stats_app_layer_flow_snmp INT,
    stats_app_layer_flow_sip INT,
    stats_app_layer_flow_rfb INT,
    stats_app_layer_flow_mqtt INT,
    stats_app_layer_flow_telnet INT,
    stats_app_layer_flow_rdp INT,
    stats_app_layer_flow_http2 INT,
    stats_app_layer_flow_bittorrent_dht INT,
    stats_app_layer_flow_failed_tcp INT,
    stats_app_layer_flow_dcerpc_udp INT,
    stats_app_layer_flow_dns_udp INT,
    stats_app_layer_flow_nfs_udp INT,
    stats_app_layer_flow_krb5_udp INT,
    stats_app_layer_flow_failed_udp INT,
    stats_app_layer_tx_http INT,
    stats_app_layer_tx_ftp INT,
    stats_app_layer_tx_smtp INT,
    stats_app_layer_tx_tls INT,
    stats_app_layer_tx_ssh INT,
    stats_app_layer_tx_imap INT,
    stats_app_layer_tx_smb INT,
    stats_app_layer_tx_dcerpc_tcp INT,
    stats_app_layer_tx_dns_tcp INT,
    stats_app_layer_tx_nfs_tcp INT,
    stats_app_layer_tx_ntp INT,
    stats_app_layer_tx_ftp_data INT,
    stats_app_layer_tx_tftp INT,
    stats_app_layer_tx_ike INT,
    stats_app_layer_tx_krb5_tcp INT,
    stats_app_layer_tx_quic INT,
    stats_app_layer_tx_dhcp INT,
    stats_app_layer_tx_snmp INT,
    stats_app_layer_tx_sip INT,
    stats_app_layer_tx_rfb INT,
    stats_app_layer_tx_mqtt INT,
    stats_app_layer_tx_telnet INT,
    stats_app_layer_tx_rdp INT,
    stats_app_layer_tx_http2 INT,
    stats_app_layer_tx_bittorrent_dht INT,
    stats_app_layer_tx_dcerpc_udp INT,
    stats_app_layer_tx_dns_udp INT,
    stats_app_layer_tx_nfs_udp INT,
    stats_app_layer_tx_krb5_udp INT,
    stats_app_layer_error_http_gap INT,
    stats_app_layer_error_http_alloc INT,
    stats_app_layer_error_http_parser INT,
    stats_app_layer_error_http_internal INT,
    stats_app_layer_error_ftp_gap INT,
    stats_app_layer_error_ftp_alloc INT,
    stats_app_layer_error_ftp_parser INT,
    stats_app_layer_error_ftp_internal INT,
    stats_app_layer_error_smtp_gap INT,
    stats_app_layer_error_smtp_alloc INT,
    stats_app_layer_error_smtp_parser INT,
    stats_app_layer_error_smtp_internal INT,
    stats_app_layer_error_tls_gap INT,
    stats_app_layer_error_tls_alloc INT,
    stats_app_layer_error_tls_parser INT,
    stats_app_layer_error_tls_internal INT,
    stats_app_layer_error_ssh_gap INT,
    stats_app_layer_error_ssh_alloc INT,
    stats_app_layer_error_ssh_parser INT,
    stats_app_layer_error_ssh_internal INT,
    stats_app_layer_error_imap_gap INT,
    stats_app_layer_error_imap_alloc INT,
    stats_app_layer_error_imap_parser INT,
    stats_app_layer_error_imap_internal INT,
    stats_app_layer_error_smb_gap INT,
    stats_app_layer_error_smb_alloc INT,
    stats_app_layer_error_smb_parser INT,
    stats_app_layer_error_smb_internal INT,
    stats_app_layer_error_dcerpc_tcp_gap INT,
    stats_app_layer_error_dcerpc_tcp_alloc INT,
    stats_app_layer_error_dcerpc_tcp_parser INT,
    stats_app_layer_error_dcerpc_tcp_internal INT,
    stats_app_layer_error_dns_tcp_gap INT,
    stats_app_layer_error_dns_tcp_alloc INT,
    stats_app_layer_error_dns_tcp_parser INT,
    stats_app_layer_error_dns_tcp_internal INT,
    stats_app_layer_error_nfs_tcp_gap INT,
    stats_app_layer_error_nfs_tcp_alloc INT,
    stats_app_layer_error_nfs_tcp_parser INT,
    stats_app_layer_error_nfs_tcp_internal INT,
    stats_app_layer_error_ntp_gap INT,
    stats_app_layer_error_ntp_alloc INT,
    stats_app_layer_error_ntp_parser INT,
    stats_app_layer_error_ntp_internal INT,
    stats_app_layer_error_ftp_data_gap INT,
    stats_app_layer_error_ftp_data_alloc INT,
    stats_app_layer_error_ftp_data_parser INT,
    stats_app_layer_error_ftp_data_internal INT,
    stats_app_layer_error_tftp_gap INT,
    stats_app_layer_error_tftp_alloc INT,
    stats_app_layer_error_tftp_parser INT,
    stats_app_layer_error_tftp_internal INT,
    stats_app_layer_error_ike_gap INT,
    stats_app_layer_error_ike_alloc INT,
    stats_app_layer_error_ike_parser INT,
    stats_app_layer_error_ike_internal INT,
    stats_app_layer_error_krb5_tcp_gap INT,
    stats_app_layer_error_krb5_tcp_alloc INT,
    stats_app_layer_error_krb5_tcp_parser INT,
    stats_app_layer_error_krb5_tcp_internal INT,
    stats_app_layer_error_quic_gap INT,
    stats_app_layer_error_quic_alloc INT,
    stats_app_layer_error_quic_parser INT,
    stats_app_layer_error_quic_internal INT,
    stats_app_layer_error_dhcp_gap INT,
    stats_app_layer_error_dhcp_alloc INT,
    stats_app_layer_error_dhcp_parser INT,
    stats_app_layer_error_dhcp_internal INT,
    stats_app_layer_error_snmp_gap INT,
    stats_app_layer_error_snmp_alloc INT,
    stats_app_layer_error_snmp_parser INT,
    stats_app_layer_error_snmp_internal INT,
    stats_app_layer_error_sip_gap INT,
    stats_app_layer_error_sip_alloc INT,
    stats_app_layer_error_sip_parser INT,
    stats_app_layer_error_sip_internal INT,
    stats_app_layer_error_rfb_gap INT,
    stats_app_layer_error_rfb_alloc INT,
    stats_app_layer_error_rfb_parser INT,
    stats_app_layer_error_rfb_internal INT,
    stats_app_layer_error_mqtt_gap INT,
    stats_app_layer_error_mqtt_alloc INT,
    stats_app_layer_error_mqtt_parser INT,
    stats_app_layer_error_mqtt_internal INT,
    stats_app_layer_error_telnet_gap INT,
    stats_app_layer_error_telnet_alloc INT,
    stats_app_layer_error_telnet_parser INT,
    stats_app_layer_error_telnet_internal INT,
    stats_app_layer_error_rdp_gap INT,
    stats_app_layer_error_rdp_alloc INT,
    stats_app_layer_error_rdp_parser INT,
    stats_app_layer_error_rdp_internal INT,
    stats_app_layer_error_http2_gap INT,
    stats_app_layer_error_http2_alloc INT,
    stats_app_layer_error_http2_parser INT,
    stats_app_layer_error_http2_internal INT,
    stats_app_layer_error_bittorrent_dht_gap INT,
    stats_app_layer_error_bittorrent_dht_alloc INT,
    stats_app_layer_error_bittorrent_dht_parser INT,
    stats_app_layer_error_bittorrent_dht_internal INT,
    stats_app_layer_error_failed_tcp_gap INT,
    stats_app_layer_error_dcerpc_udp_alloc INT,
    stats_app_layer_error_dcerpc_udp_parser INT,
    stats_app_layer_error_dcerpc_udp_internal INT,
    stats_app_layer_error_dns_udp_alloc INT,
    stats_app_layer_error_dns_udp_parser INT,
    stats_app_layer_error_dns_udp_internal INT,
    stats_app_layer_error_nfs_udp_alloc INT,
    stats_app_layer_error_nfs_udp_parser INT,
    stats_app_layer_error_nfs_udp_internal INT,
    stats_app_layer_error_krb5_udp_alloc INT,
    stats_app_layer_error_krb5_udp_parser INT,
    stats_app_layer_error_krb5_udp_internal INT,
    stats_app_layer_expectations INT,
    stats_memcap_pressure INT,
    stats_memcap_pressure_max INT,
    stats_http_memuse INT,
    stats_http_memcap INT,
    stats_ftp_memuse INT,
    stats_ftp_memcap INT,
    stats_file_store_open_files INT
);""")
        self.conn.commit()

    def insert_stat(self, stat):
        column_names = [
            "timestamp",
            "event_type",
            "stats_uptime",
            "stats_capture_kernel_packets",
            "stats_capture_kernel_drops",
            "stats_capture_errors",
            "stats_capture_afpacket_busy_loop_avg",
            "stats_capture_afpacket_polls",
            "stats_capture_afpacket_poll_signal",
            "stats_capture_afpacket_poll_timeout",
            "stats_capture_afpacket_poll_data",
            "stats_capture_afpacket_poll_errors",
            "stats_capture_afpacket_send_errors",
            "stats_decoder_pkts",
            "stats_decoder_bytes",
            "stats_decoder_invalid",
            "stats_decoder_ipv4",
            "stats_decoder_ipv6",
            "stats_decoder_ethernet",
            "stats_decoder_arp",
            "stats_decoder_unknown_ethertype",
            "stats_decoder_chdlc",
            "stats_decoder_raw",
            "stats_decoder_null",
            "stats_decoder_sll",
            "stats_decoder_tcp",
            "stats_decoder_udp",
            "stats_decoder_sctp",
            "stats_decoder_esp",
            "stats_decoder_icmpv4",
            "stats_decoder_icmpv6",
            "stats_decoder_ppp",
            "stats_decoder_pppoe",
            "stats_decoder_geneve",
            "stats_decoder_gre",
            "stats_decoder_vlan",
            "stats_decoder_vlan_qinq",
            "stats_decoder_vlan_qinqinq",
            "stats_decoder_vxlan",
            "stats_decoder_vntag",
            "stats_decoder_ieee8021ah",
            "stats_decoder_teredo",
            "stats_decoder_ipv4_in_ipv6",
            "stats_decoder_ipv6_in_ipv6",
            "stats_decoder_mpls",
            "stats_decoder_avg_pkt_size",
            "stats_decoder_max_pkt_size",
            "stats_decoder_max_mac_addrs_src",
            "stats_decoder_max_mac_addrs_dst",
            "stats_decoder_erspan",
            "stats_decoder_nsh",
            "stats_decoder_event_afpacket_trunc_pkt",
            "stats_decoder_event_ipv4_pkt_too_small",
            "stats_decoder_event_ipv4_hlen_too_small",
            "stats_decoder_event_ipv4_iplen_smaller_than_hlen",
            "stats_decoder_event_ipv4_trunc_pkt",
            "stats_decoder_event_ipv4_opt_invalid",
            "stats_decoder_event_ipv4_opt_invalid_len",
            "stats_decoder_event_ipv4_opt_malformed",
            "stats_decoder_event_ipv4_opt_pad_required",
            "stats_decoder_event_ipv4_opt_eol_required",
            "stats_decoder_event_ipv4_opt_duplicate",
            "stats_decoder_event_ipv4_opt_unknown",
            "stats_decoder_event_ipv4_wrong_ip_version",
            "stats_decoder_event_ipv4_icmpv6",
            "stats_decoder_event_ipv4_frag_pkt_too_large",
            "stats_decoder_event_ipv4_frag_overlap",
            "stats_decoder_event_ipv4_frag_ignored",
            "stats_decoder_event_icmpv4_pkt_too_small",
            "stats_decoder_event_icmpv4_unknown_type",
            "stats_decoder_event_icmpv4_unknown_code",
            "stats_decoder_event_icmpv4_ipv4_trunc_pkt",
            "stats_decoder_event_icmpv4_ipv4_unknown_ver",
            "stats_decoder_event_icmpv6_unknown_type",
            "stats_decoder_event_icmpv6_unknown_code",
            "stats_decoder_event_icmpv6_pkt_too_small",
            "stats_decoder_event_icmpv6_ipv6_unknown_version",
            "stats_decoder_event_icmpv6_ipv6_trunc_pkt",
            "stats_decoder_event_icmpv6_mld_message_with_invalid_hl",
            "stats_decoder_event_icmpv6_unassigned_type",
            "stats_decoder_event_icmpv6_experimentation_type",
            "stats_decoder_event_ipv6_pkt_too_small",
            "stats_decoder_event_ipv6_trunc_pkt",
            "stats_decoder_event_ipv6_trunc_exthdr",
            "stats_decoder_event_ipv6_exthdr_dupl_fh",
            "stats_decoder_event_ipv6_exthdr_useless_fh",
            "stats_decoder_event_ipv6_exthdr_dupl_rh",
            "stats_decoder_event_ipv6_exthdr_dupl_hh",
            "stats_decoder_event_ipv6_exthdr_dupl_dh",
            "stats_decoder_event_ipv6_exthdr_dupl_ah",
            "stats_decoder_event_ipv6_exthdr_dupl_eh",
            "stats_decoder_event_ipv6_exthdr_invalid_optlen",
            "stats_decoder_event_ipv6_wrong_ip_version",
            "stats_decoder_event_ipv6_exthdr_ah_res_not_null",
            "stats_decoder_event_ipv6_hopopts_unknown_opt",
            "stats_decoder_event_ipv6_hopopts_only_padding",
            "stats_decoder_event_ipv6_dstopts_unknown_opt",
            "stats_decoder_event_ipv6_dstopts_only_padding",
            "stats_decoder_event_ipv6_rh_type_0",
            "stats_decoder_event_ipv6_zero_len_padn",
            "stats_decoder_event_ipv6_fh_non_zero_reserved_field",
            "stats_decoder_event_ipv6_data_after_none_header",
            "stats_decoder_event_ipv6_unknown_next_header",
            "stats_decoder_event_ipv6_icmpv4",
            "stats_decoder_event_ipv6_frag_pkt_too_large",
            "stats_decoder_event_ipv6_frag_overlap",
            "stats_decoder_event_ipv6_frag_invalid_length",
            "stats_decoder_event_ipv6_frag_ignored",
            "stats_decoder_event_ipv6_ipv4_in_ipv6_too_small",
            "stats_decoder_event_ipv6_ipv4_in_ipv6_wrong_version",
            "stats_decoder_event_ipv6_ipv6_in_ipv6_too_small",
            "stats_decoder_event_ipv6_ipv6_in_ipv6_wrong_version",
            "stats_decoder_event_tcp_pkt_too_small",
            "stats_decoder_event_tcp_hlen_too_small",
            "stats_decoder_event_tcp_invalid_optlen",
            "stats_decoder_event_tcp_opt_invalid_len",
            "stats_decoder_event_tcp_opt_duplicate",
            "stats_decoder_event_udp_pkt_too_small",
            "stats_decoder_event_udp_hlen_too_small",
            "stats_decoder_event_udp_hlen_invalid",
            "stats_decoder_event_udp_len_invalid",
            "stats_decoder_event_sll_pkt_too_small",
            "stats_decoder_event_ethernet_pkt_too_small",
            "stats_decoder_event_ppp_pkt_too_small",
            "stats_decoder_event_ppp_vju_pkt_too_small",
            "stats_decoder_event_ppp_ip4_pkt_too_small",
            "stats_decoder_event_ppp_ip6_pkt_too_small",
            "stats_decoder_event_ppp_wrong_type",
            "stats_decoder_event_ppp_unsup_proto",
            "stats_decoder_event_pppoe_pkt_too_small",
            "stats_decoder_event_pppoe_wrong_code",
            "stats_decoder_event_pppoe_malformed_tags",
            "stats_decoder_event_gre_pkt_too_small",
            "stats_decoder_event_gre_wrong_version",
            "stats_decoder_event_gre_version0_recur",
            "stats_decoder_event_gre_version0_flags",
            "stats_decoder_event_gre_version0_hdr_too_big",
            "stats_decoder_event_gre_version0_malformed_sre_hdr",
            "stats_decoder_event_gre_version1_chksum",
            "stats_decoder_event_gre_version1_route",
            "stats_decoder_event_gre_version1_ssr",
            "stats_decoder_event_gre_version1_recur",
            "stats_decoder_event_gre_version1_flags",
            "stats_decoder_event_gre_version1_no_key",
            "stats_decoder_event_gre_version1_wrong_protocol",
            "stats_decoder_event_gre_version1_malformed_sre_hdr",
            "stats_decoder_event_gre_version1_hdr_too_big",
            "stats_decoder_event_vlan_header_too_small",
            "stats_decoder_event_vlan_unknown_type",
            "stats_decoder_event_vlan_too_many_layers",
            "stats_decoder_event_ieee8021ah_header_too_small",
            "stats_decoder_event_vntag_header_too_small",
            "stats_decoder_event_vntag_unknown_type",
            "stats_decoder_event_ipraw_invalid_ip_version",
            "stats_decoder_event_ltnull_pkt_too_small",
            "stats_decoder_event_ltnull_unsupported_type",
            "stats_decoder_event_sctp_pkt_too_small",
            "stats_decoder_event_esp_pkt_too_small",
            "stats_decoder_event_mpls_header_too_small",
            "stats_decoder_event_mpls_pkt_too_small",
            "stats_decoder_event_mpls_bad_label_router_alert",
            "stats_decoder_event_mpls_bad_label_implicit_null",
            "stats_decoder_event_mpls_bad_label_reserved",
            "stats_decoder_event_mpls_unknown_payload_type",
            "stats_decoder_event_vxlan_unknown_payload_type",
            "stats_decoder_event_geneve_unknown_payload_type",
            "stats_decoder_event_erspan_header_too_small",
            "stats_decoder_event_erspan_unsupported_version",
            "stats_decoder_event_erspan_too_many_vlan_layers",
            "stats_decoder_event_dce_pkt_too_small",
            "stats_decoder_event_chdlc_pkt_too_small",
            "stats_decoder_event_nsh_header_too_small",
            "stats_decoder_event_nsh_unsupported_version",
            "stats_decoder_event_nsh_bad_header_length",
            "stats_decoder_event_nsh_reserved_type",
            "stats_decoder_event_nsh_unsupported_type",
            "stats_decoder_event_nsh_unknown_payload",
            "stats_decoder_too_many_layers",
            "stats_tcp_syn",
            "stats_tcp_synack",
            "stats_tcp_rst",
            "stats_tcp_urg",
            "stats_tcp_active_sessions",
            "stats_tcp_sessions",
            "stats_tcp_ssn_memcap_drop",
            "stats_tcp_ssn_from_cache",
            "stats_tcp_ssn_from_pool",
            "stats_tcp_pseudo",
            "stats_tcp_pseudo_failed",
            "stats_tcp_invalid_checksum",
            "stats_tcp_midstream_pickups",
            "stats_tcp_pkt_on_wrong_thread",
            "stats_tcp_ack_unseen_data",
            "stats_tcp_segment_memcap_drop",
            "stats_tcp_segment_from_cache",
            "stats_tcp_segment_from_pool",
            "stats_tcp_stream_depth_reached",
            "stats_tcp_reassembly_gap",
            "stats_tcp_overlap",
            "stats_tcp_overlap_diff_data",
            "stats_tcp_insert_data_normal_fail",
            "stats_tcp_insert_data_overlap_fail",
            "stats_tcp_urgent_oob_data",
            "stats_tcp_memuse",
            "stats_tcp_reassembly_memuse",
            "stats_flow_memcap",
            "stats_flow_total",
            "stats_flow_active",
            "stats_flow_tcp",
            "stats_flow_udp",
            "stats_flow_icmpv4",
            "stats_flow_icmpv6",
            "stats_flow_tcp_reuse",
            "stats_flow_get_used",
            "stats_flow_get_used_eval",
            "stats_flow_get_used_eval_reject",
            "stats_flow_get_used_eval_busy",
            "stats_flow_get_used_failed",
            "stats_flow_wrk_spare_sync_avg",
            "stats_flow_wrk_spare_sync",
            "stats_flow_wrk_spare_sync_incomplete",
            "stats_flow_wrk_spare_sync_empty",
            "stats_flow_wrk_flows_evicted_needs_work",
            "stats_flow_wrk_flows_evicted_pkt_inject",
            "stats_flow_wrk_flows_evicted",
            "stats_flow_wrk_flows_injected",
            "stats_flow_wrk_flows_injected_max",
            "stats_flow_end_state_new",
            "stats_flow_end_state_established",
            "stats_flow_end_state_closed",
            "stats_flow_end_state_local_bypassed",
            "stats_flow_end_state_capture_bypassed",
            "stats_flow_end_tcp_state_none",
            "stats_flow_end_tcp_state_syn_sent",
            "stats_flow_end_tcp_state_syn_recv",
            "stats_flow_end_tcp_state_established",
            "stats_flow_end_tcp_state_fin_wait1",
            "stats_flow_end_tcp_state_fin_wait2",
            "stats_flow_end_tcp_state_time_wait",
            "stats_flow_end_tcp_state_last_ack",
            "stats_flow_end_tcp_state_close_wait",
            "stats_flow_end_tcp_state_closing",
            "stats_flow_end_tcp_state_closed",
            "stats_flow_end_tcp_liberal",
            "stats_flow_mgr_full_hash_pass",
            "stats_flow_mgr_rows_per_sec",
            "stats_flow_mgr_rows_maxlen",
            "stats_flow_mgr_flows_checked",
            "stats_flow_mgr_flows_notimeout",
            "stats_flow_mgr_flows_timeout",
            "stats_flow_mgr_flows_evicted",
            "stats_flow_mgr_flows_evicted_needs_work",
            "stats_flow_spare",
            "stats_flow_emerg_mode_entered",
            "stats_flow_emerg_mode_over",
            "stats_flow_recycler_recycled",
            "stats_flow_recycler_queue_avg",
            "stats_flow_recycler_queue_max",
            "stats_flow_memuse",
            "stats_defrag_ipv4_fragments",
            "stats_defrag_ipv4_reassembled",
            "stats_defrag_ipv6_fragments",
            "stats_defrag_ipv6_reassembled",
            "stats_defrag_max_frag_hits",
            "stats_flow_bypassed_local_pkts",
            "stats_flow_bypassed_local_bytes",
            "stats_flow_bypassed_local_capture_pkts",
            "stats_flow_bypassed_local_capture_bytes",
            "stats_flow_bypassed_closed",
            "stats_flow_bypassed_pkts",
            "stats_flow_bypassed_bytes",
            "stats_detect_engines_0_id",
            "stats_detect_engines_0_last_reload",
            "stats_detect_engines_0_rules_loaded",
            "stats_detect_engines_0_rules_failed",
            "stats_detect_engines_0_rules_skipped",
            "stats_detect_alert",
            "stats_detect_alert_queue_overflow",
            "stats_detect_alerts_suppressed",
            "stats_app_layer_flow_http",
            "stats_app_layer_flow_ftp",
            "stats_app_layer_flow_smtp",
            "stats_app_layer_flow_tls",
            "stats_app_layer_flow_ssh",
            "stats_app_layer_flow_imap",
            "stats_app_layer_flow_smb",
            "stats_app_layer_flow_dcerpc_tcp",
            "stats_app_layer_flow_dns_tcp",
            "stats_app_layer_flow_nfs_tcp",
            "stats_app_layer_flow_ntp",
            "stats_app_layer_flow_ftp_data",
            "stats_app_layer_flow_tftp",
            "stats_app_layer_flow_ike",
            "stats_app_layer_flow_krb5_tcp",
            "stats_app_layer_flow_quic",
            "stats_app_layer_flow_dhcp",
            "stats_app_layer_flow_snmp",
            "stats_app_layer_flow_sip",
            "stats_app_layer_flow_rfb",
            "stats_app_layer_flow_mqtt",
            "stats_app_layer_flow_telnet",
            "stats_app_layer_flow_rdp",
            "stats_app_layer_flow_http2",
            "stats_app_layer_flow_bittorrent_dht",
            "stats_app_layer_flow_failed_tcp",
            "stats_app_layer_flow_dcerpc_udp",
            "stats_app_layer_flow_dns_udp",
            "stats_app_layer_flow_nfs_udp",
            "stats_app_layer_flow_krb5_udp",
            "stats_app_layer_flow_failed_udp",
            "stats_app_layer_tx_http",
            "stats_app_layer_tx_ftp",
            "stats_app_layer_tx_smtp",
            "stats_app_layer_tx_tls",
            "stats_app_layer_tx_ssh",
            "stats_app_layer_tx_imap",
            "stats_app_layer_tx_smb",
            "stats_app_layer_tx_dcerpc_tcp",
            "stats_app_layer_tx_dns_tcp",
            "stats_app_layer_tx_nfs_tcp",
            "stats_app_layer_tx_ntp",
            "stats_app_layer_tx_ftp_data",
            "stats_app_layer_tx_tftp",
            "stats_app_layer_tx_ike",
            "stats_app_layer_tx_krb5_tcp",
            "stats_app_layer_tx_quic",
            "stats_app_layer_tx_dhcp",
            "stats_app_layer_tx_snmp",
            "stats_app_layer_tx_sip",
            "stats_app_layer_tx_rfb",
            "stats_app_layer_tx_mqtt",
            "stats_app_layer_tx_telnet",
            "stats_app_layer_tx_rdp",
            "stats_app_layer_tx_http2",
            "stats_app_layer_tx_bittorrent_dht",
            "stats_app_layer_tx_dcerpc_udp",
            "stats_app_layer_tx_dns_udp",
            "stats_app_layer_tx_nfs_udp",
            "stats_app_layer_tx_krb5_udp",
            "stats_app_layer_error_http_gap",
            "stats_app_layer_error_http_alloc",
            "stats_app_layer_error_http_parser",
            "stats_app_layer_error_http_internal",
            "stats_app_layer_error_ftp_gap",
            "stats_app_layer_error_ftp_alloc",
            "stats_app_layer_error_ftp_parser",
            "stats_app_layer_error_ftp_internal",
            "stats_app_layer_error_smtp_gap",
            "stats_app_layer_error_smtp_alloc",
            "stats_app_layer_error_smtp_parser",
            "stats_app_layer_error_smtp_internal",
            "stats_app_layer_error_tls_gap",
            "stats_app_layer_error_tls_alloc",
            "stats_app_layer_error_tls_parser",
            "stats_app_layer_error_tls_internal",
            "stats_app_layer_error_ssh_gap",
            "stats_app_layer_error_ssh_alloc",
            "stats_app_layer_error_ssh_parser",
            "stats_app_layer_error_ssh_internal",
            "stats_app_layer_error_imap_gap",
            "stats_app_layer_error_imap_alloc",
            "stats_app_layer_error_imap_parser",
            "stats_app_layer_error_imap_internal",
            "stats_app_layer_error_smb_gap",
            "stats_app_layer_error_smb_alloc",
            "stats_app_layer_error_smb_parser",
            "stats_app_layer_error_smb_internal",
            "stats_app_layer_error_dcerpc_tcp_gap",
            "stats_app_layer_error_dcerpc_tcp_alloc",
            "stats_app_layer_error_dcerpc_tcp_parser",
            "stats_app_layer_error_dcerpc_tcp_internal",
            "stats_app_layer_error_dns_tcp_gap",
            "stats_app_layer_error_dns_tcp_alloc",
            "stats_app_layer_error_dns_tcp_parser",
            "stats_app_layer_error_dns_tcp_internal",
            "stats_app_layer_error_nfs_tcp_gap",
            "stats_app_layer_error_nfs_tcp_alloc",
            "stats_app_layer_error_nfs_tcp_parser",
            "stats_app_layer_error_nfs_tcp_internal",
            "stats_app_layer_error_ntp_gap",
            "stats_app_layer_error_ntp_alloc",
            "stats_app_layer_error_ntp_parser",
            "stats_app_layer_error_ntp_internal",
            "stats_app_layer_error_ftp_data_gap",
            "stats_app_layer_error_ftp_data_alloc",
            "stats_app_layer_error_ftp_data_parser",
            "stats_app_layer_error_ftp_data_internal",
            "stats_app_layer_error_tftp_gap",
            "stats_app_layer_error_tftp_alloc",
            "stats_app_layer_error_tftp_parser",
            "stats_app_layer_error_tftp_internal",
            "stats_app_layer_error_ike_gap",
            "stats_app_layer_error_ike_alloc",
            "stats_app_layer_error_ike_parser",
            "stats_app_layer_error_ike_internal",
            "stats_app_layer_error_krb5_tcp_gap",
            "stats_app_layer_error_krb5_tcp_alloc",
            "stats_app_layer_error_krb5_tcp_parser",
            "stats_app_layer_error_krb5_tcp_internal",
            "stats_app_layer_error_quic_gap",
            "stats_app_layer_error_quic_alloc",
            "stats_app_layer_error_quic_parser",
            "stats_app_layer_error_quic_internal",
            "stats_app_layer_error_dhcp_gap",
            "stats_app_layer_error_dhcp_alloc",
            "stats_app_layer_error_dhcp_parser",
            "stats_app_layer_error_dhcp_internal",
            "stats_app_layer_error_snmp_gap",
            "stats_app_layer_error_snmp_alloc",
            "stats_app_layer_error_snmp_parser",
            "stats_app_layer_error_snmp_internal",
            "stats_app_layer_error_sip_gap",
            "stats_app_layer_error_sip_alloc",
            "stats_app_layer_error_sip_parser",
            "stats_app_layer_error_sip_internal",
            "stats_app_layer_error_rfb_gap",
            "stats_app_layer_error_rfb_alloc",
            "stats_app_layer_error_rfb_parser",
            "stats_app_layer_error_rfb_internal",
            "stats_app_layer_error_mqtt_gap",
            "stats_app_layer_error_mqtt_alloc",
            "stats_app_layer_error_mqtt_parser",
            "stats_app_layer_error_mqtt_internal",
            "stats_app_layer_error_telnet_gap",
            "stats_app_layer_error_telnet_alloc",
            "stats_app_layer_error_telnet_parser",
            "stats_app_layer_error_telnet_internal",
            "stats_app_layer_error_rdp_gap",
            "stats_app_layer_error_rdp_alloc",
            "stats_app_layer_error_rdp_parser",
            "stats_app_layer_error_rdp_internal",
            "stats_app_layer_error_http2_gap",
            "stats_app_layer_error_http2_alloc",
            "stats_app_layer_error_http2_parser",
            "stats_app_layer_error_http2_internal",
            "stats_app_layer_error_bittorrent_dht_gap",
            "stats_app_layer_error_bittorrent_dht_alloc",
            "stats_app_layer_error_bittorrent_dht_parser",
            "stats_app_layer_error_bittorrent_dht_internal",
            "stats_app_layer_error_failed_tcp_gap",
            "stats_app_layer_error_dcerpc_udp_alloc",
            "stats_app_layer_error_dcerpc_udp_parser",
            "stats_app_layer_error_dcerpc_udp_internal",
            "stats_app_layer_error_dns_udp_alloc",
            "stats_app_layer_error_dns_udp_parser",
            "stats_app_layer_error_dns_udp_internal",
            "stats_app_layer_error_nfs_udp_alloc",
            "stats_app_layer_error_nfs_udp_parser",
            "stats_app_layer_error_nfs_udp_internal",
            "stats_app_layer_error_krb5_udp_alloc",
            "stats_app_layer_error_krb5_udp_parser",
            "stats_app_layer_error_krb5_udp_internal",
            "stats_app_layer_expectations",
            "stats_memcap_pressure",
            "stats_memcap_pressure_max",
            "stats_http_memuse",
            "stats_http_memcap",
            "stats_ftp_memuse",
            "stats_ftp_memcap",
            "stats_file_store_open_files",
        ]

        values = [f"'{stat['timestamp']}'", f"'{stat['event_type']}'", str(stat["stats"]["uptime"]), str(stat["stats"]["capture"]["kernel_packets"]), str(stat["stats"]["capture"]["kernel_drops"]), str(stat["stats"]["capture"]["errors"]), str(stat["stats"]["capture"]["afpacket"]["busy_loop_avg"]),
                  str(stat["stats"]["capture"]["afpacket"]["polls"]), str(stat["stats"]["capture"]["afpacket"]["poll_signal"]), str(stat["stats"]["capture"]["afpacket"]["poll_timeout"]), str(stat["stats"]["capture"]["afpacket"]["poll_data"]), str(stat["stats"]["capture"]["afpacket"]["poll_errors"]),
                  str(stat["stats"]["capture"]["afpacket"]["send_errors"]), str(stat["stats"]["decoder"]["pkts"]), str(stat["stats"]["decoder"]["bytes"]), str(stat["stats"]["decoder"]["invalid"]), str(stat["stats"]["decoder"]["ipv4"]), str(stat["stats"]["decoder"]["ipv6"]), str(stat["stats"]["decoder"]["ethernet"]),
                  str(stat["stats"]["decoder"]["arp"]), str(stat["stats"]["decoder"]["unknown_ethertype"]), str(stat["stats"]["decoder"]["chdlc"]), str(stat["stats"]["decoder"]["raw"]), str(stat["stats"]["decoder"]["null"]), str(stat["stats"]["decoder"]["sll"]), str(stat["stats"]["decoder"]["tcp"]),
                  str(stat["stats"]["decoder"]["udp"]), str(stat["stats"]["decoder"]["sctp"]), str(stat["stats"]["decoder"]["esp"]), str(stat["stats"]["decoder"]["icmpv4"]), str(stat["stats"]["decoder"]["icmpv6"]), str(stat["stats"]["decoder"]["ppp"]), str(stat["stats"]["decoder"]["pppoe"]),
                  str(stat["stats"]["decoder"]["geneve"]), str(stat["stats"]["decoder"]["gre"]), str(stat["stats"]["decoder"]["vlan"]), str(stat["stats"]["decoder"]["vlan_qinq"]), str(stat["stats"]["decoder"]["vlan_qinqinq"]), str(stat["stats"]["decoder"]["vxlan"]), str(stat["stats"]["decoder"]["vntag"]),
                  str(stat["stats"]["decoder"]["ieee8021ah"]), str(stat["stats"]["decoder"]["teredo"]), str(stat["stats"]["decoder"]["ipv4_in_ipv6"]), str(stat["stats"]["decoder"]["ipv6_in_ipv6"]), str(stat["stats"]["decoder"]["mpls"]), str(stat["stats"]["decoder"]["avg_pkt_size"]),
                  str(stat["stats"]["decoder"]["max_pkt_size"]), str(stat["stats"]["decoder"]["max_mac_addrs_src"]), str(stat["stats"]["decoder"]["max_mac_addrs_dst"]), str(stat["stats"]["decoder"]["erspan"]), str(stat["stats"]["decoder"]["nsh"]), str(stat["stats"]["decoder"]["event"]["afpacket"]["trunc_pkt"]),
                  str(stat["stats"]["decoder"]["event"]["ipv4"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["hlen_too_small"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["iplen_smaller_than_hlen"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["trunc_pkt"]),
                  str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_invalid"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_invalid_len"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_malformed"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_pad_required"]),
                  str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_eol_required"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_duplicate"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["opt_unknown"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["wrong_ip_version"]),
                  str(stat["stats"]["decoder"]["event"]["ipv4"]["icmpv6"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["frag_pkt_too_large"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["frag_overlap"]), str(stat["stats"]["decoder"]["event"]["ipv4"]["frag_ignored"]),
                  str(stat["stats"]["decoder"]["event"]["icmpv4"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["icmpv4"]["unknown_type"]), str(stat["stats"]["decoder"]["event"]["icmpv4"]["unknown_code"]), str(stat["stats"]["decoder"]["event"]["icmpv4"]["ipv4_trunc_pkt"]),
                  str(stat["stats"]["decoder"]["event"]["icmpv4"]["ipv4_unknown_ver"]), str(stat["stats"]["decoder"]["event"]["icmpv6"]["unknown_type"]), str(stat["stats"]["decoder"]["event"]["icmpv6"]["unknown_code"]), str(stat["stats"]["decoder"]["event"]["icmpv6"]["pkt_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["icmpv6"]["ipv6_unknown_version"]), str(stat["stats"]["decoder"]["event"]["icmpv6"]["ipv6_trunc_pkt"]), str(
                stat["stats"]["decoder"]["event"]["icmpv6"][
                    "mld_message_with_invalid_hl"
                ]
            ), str(stat["stats"]["decoder"]["event"]["icmpv6"]["unassigned_type"]), str(stat["stats"]["decoder"]["event"]["icmpv6"]["experimentation_type"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["trunc_pkt"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["trunc_exthdr"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_fh"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_useless_fh"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_rh"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_hh"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_dh"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_ah"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_dupl_eh"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_invalid_optlen"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["wrong_ip_version"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["exthdr_ah_res_not_null"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["hopopts_unknown_opt"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["hopopts_only_padding"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["dstopts_unknown_opt"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["dstopts_only_padding"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["rh_type_0"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["zero_len_padn"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["fh_non_zero_reserved_field"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["data_after_none_header"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["unknown_next_header"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["icmpv4"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["frag_pkt_too_large"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["frag_overlap"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["frag_invalid_length"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["frag_ignored"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["ipv4_in_ipv6_too_small"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["ipv4_in_ipv6_wrong_version"]), str(stat["stats"]["decoder"]["event"]["ipv6"]["ipv6_in_ipv6_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["ipv6"]["ipv6_in_ipv6_wrong_version"]), str(stat["stats"]["decoder"]["event"]["tcp"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["tcp"]["hlen_too_small"]), str(stat["stats"]["decoder"]["event"]["tcp"]["invalid_optlen"]),
                  str(stat["stats"]["decoder"]["event"]["tcp"]["opt_invalid_len"]), str(stat["stats"]["decoder"]["event"]["tcp"]["opt_duplicate"]), str(stat["stats"]["decoder"]["event"]["udp"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["udp"]["hlen_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["udp"]["hlen_invalid"]), str(stat["stats"]["decoder"]["event"]["udp"]["len_invalid"]), str(stat["stats"]["decoder"]["event"]["sll"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ethernet"]["pkt_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["ppp"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ppp"]["vju_pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ppp"]["ip4_pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["ppp"]["ip6_pkt_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["ppp"]["wrong_type"]), str(stat["stats"]["decoder"]["event"]["ppp"]["unsup_proto"]), str(stat["stats"]["decoder"]["event"]["pppoe"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["pppoe"]["wrong_code"]),
                  str(stat["stats"]["decoder"]["event"]["pppoe"]["malformed_tags"]), str(stat["stats"]["decoder"]["event"]["gre"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["gre"]["wrong_version"]), str(stat["stats"]["decoder"]["event"]["gre"]["version0_recur"]),
                  str(stat["stats"]["decoder"]["event"]["gre"]["version0_flags"]), str(stat["stats"]["decoder"]["event"]["gre"]["version0_hdr_too_big"]), str(stat["stats"]["decoder"]["event"]["gre"]["version0_malformed_sre_hdr"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_chksum"]),
                  str(stat["stats"]["decoder"]["event"]["gre"]["version1_route"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_ssr"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_recur"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_flags"]),
                  str(stat["stats"]["decoder"]["event"]["gre"]["version1_no_key"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_wrong_protocol"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_malformed_sre_hdr"]), str(stat["stats"]["decoder"]["event"]["gre"]["version1_hdr_too_big"]),
                  str(stat["stats"]["decoder"]["event"]["vlan"]["header_too_small"]), str(stat["stats"]["decoder"]["event"]["vlan"]["unknown_type"]), str(stat["stats"]["decoder"]["event"]["vlan"]["too_many_layers"]), str(stat["stats"]["decoder"]["event"]["ieee8021ah"]["header_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["vntag"]["header_too_small"]), str(stat["stats"]["decoder"]["event"]["vntag"]["unknown_type"]), str(stat["stats"]["decoder"]["event"]["ipraw"]["invalid_ip_version"]), str(stat["stats"]["decoder"]["event"]["ltnull"]["pkt_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["ltnull"]["unsupported_type"]), str(stat["stats"]["decoder"]["event"]["sctp"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["esp"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["mpls"]["header_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["mpls"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["mpls"]["bad_label_router_alert"]), str(stat["stats"]["decoder"]["event"]["mpls"]["bad_label_implicit_null"]), str(stat["stats"]["decoder"]["event"]["mpls"]["bad_label_reserved"]),
                  str(stat["stats"]["decoder"]["event"]["mpls"]["unknown_payload_type"]), str(stat["stats"]["decoder"]["event"]["vxlan"]["unknown_payload_type"]), str(stat["stats"]["decoder"]["event"]["geneve"]["unknown_payload_type"]), str(stat["stats"]["decoder"]["event"]["erspan"]["header_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["erspan"]["unsupported_version"]), str(stat["stats"]["decoder"]["event"]["erspan"]["too_many_vlan_layers"]), str(stat["stats"]["decoder"]["event"]["dce"]["pkt_too_small"]), str(stat["stats"]["decoder"]["event"]["chdlc"]["pkt_too_small"]),
                  str(stat["stats"]["decoder"]["event"]["nsh"]["header_too_small"]), str(stat["stats"]["decoder"]["event"]["nsh"]["unsupported_version"]), str(stat["stats"]["decoder"]["event"]["nsh"]["bad_header_length"]), str(stat["stats"]["decoder"]["event"]["nsh"]["reserved_type"]),
                  str(stat["stats"]["decoder"]["event"]["nsh"]["unsupported_type"]), str(stat["stats"]["decoder"]["event"]["nsh"]["unknown_payload"]), str(stat["stats"]["decoder"]["too_many_layers"]), str(stat["stats"]["tcp"]["syn"]), str(stat["stats"]["tcp"]["synack"]), str(stat["stats"]["tcp"]["rst"]),
                  str(stat["stats"]["tcp"]["urg"]), str(stat["stats"]["tcp"]["active_sessions"]), str(stat["stats"]["tcp"]["sessions"]), str(stat["stats"]["tcp"]["ssn_memcap_drop"]), str(stat["stats"]["tcp"]["ssn_from_cache"]), str(stat["stats"]["tcp"]["ssn_from_pool"]), str(stat["stats"]["tcp"]["pseudo"]),
                  str(stat["stats"]["tcp"]["pseudo_failed"]), str(stat["stats"]["tcp"]["invalid_checksum"]), str(stat["stats"]["tcp"]["midstream_pickups"]), str(stat["stats"]["tcp"]["pkt_on_wrong_thread"]), str(stat["stats"]["tcp"]["ack_unseen_data"]), str(stat["stats"]["tcp"]["segment_memcap_drop"]),
                  str(stat["stats"]["tcp"]["segment_from_cache"]), str(stat["stats"]["tcp"]["segment_from_pool"]), str(stat["stats"]["tcp"]["stream_depth_reached"]), str(stat["stats"]["tcp"]["reassembly_gap"]), str(stat["stats"]["tcp"]["overlap"]), str(stat["stats"]["tcp"]["overlap_diff_data"]),
                  str(stat["stats"]["tcp"]["insert_data_normal_fail"]), str(stat["stats"]["tcp"]["insert_data_overlap_fail"]), str(stat["stats"]["tcp"]["urgent_oob_data"]), str(stat["stats"]["tcp"]["memuse"]), str(stat["stats"]["tcp"]["reassembly_memuse"]), str(stat["stats"]["flow"]["memcap"]),
                  str(stat["stats"]["flow"]["total"]), str(stat["stats"]["flow"]["active"]), str(stat["stats"]["flow"]["tcp"]), str(stat["stats"]["flow"]["udp"]), str(stat["stats"]["flow"]["icmpv4"]), str(stat["stats"]["flow"]["icmpv6"]), str(stat["stats"]["flow"]["tcp_reuse"]), str(stat["stats"]["flow"]["get_used"]),
                  str(stat["stats"]["flow"]["get_used_eval"]), str(stat["stats"]["flow"]["get_used_eval_reject"]), str(stat["stats"]["flow"]["get_used_eval_busy"]), str(stat["stats"]["flow"]["get_used_failed"]), str(stat["stats"]["flow"]["wrk"]["spare_sync_avg"]), str(stat["stats"]["flow"]["wrk"]["spare_sync"]),
                  str(stat["stats"]["flow"]["wrk"]["spare_sync_incomplete"]), str(stat["stats"]["flow"]["wrk"]["spare_sync_empty"]), str(stat["stats"]["flow"]["wrk"]["flows_evicted_needs_work"]), str(stat["stats"]["flow"]["wrk"]["flows_evicted_pkt_inject"]), str(stat["stats"]["flow"]["wrk"]["flows_evicted"]),
                  str(stat["stats"]["flow"]["wrk"]["flows_injected"]), str(stat["stats"]["flow"]["wrk"]["flows_injected_max"]), str(stat["stats"]["flow"]["end"]["state"]["new"]), str(stat["stats"]["flow"]["end"]["state"]["established"]), str(stat["stats"]["flow"]["end"]["state"]["closed"]),
                  str(stat["stats"]["flow"]["end"]["state"]["local_bypassed"]), str(stat["stats"]["flow"]["end"]["state"]["capture_bypassed"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["none"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["syn_sent"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["syn_recv"]),
                  str(stat["stats"]["flow"]["end"]["tcp_state"]["established"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["fin_wait1"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["fin_wait2"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["time_wait"]),
                  str(stat["stats"]["flow"]["end"]["tcp_state"]["last_ack"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["close_wait"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["closing"]), str(stat["stats"]["flow"]["end"]["tcp_state"]["closed"]), str(stat["stats"]["flow"]["end"]["tcp_liberal"]),
                  str(stat["stats"]["flow"]["mgr"]["full_hash_pass"]), str(stat["stats"]["flow"]["mgr"]["rows_per_sec"]), str(stat["stats"]["flow"]["mgr"]["rows_maxlen"]), str(stat["stats"]["flow"]["mgr"]["flows_checked"]), str(stat["stats"]["flow"]["mgr"]["flows_notimeout"]),
                  str(stat["stats"]["flow"]["mgr"]["flows_timeout"]), str(stat["stats"]["flow"]["mgr"]["flows_evicted"]), str(stat["stats"]["flow"]["mgr"]["flows_evicted_needs_work"]), str(stat["stats"]["flow"]["spare"]), str(stat["stats"]["flow"]["emerg_mode_entered"]), str(stat["stats"]["flow"]["emerg_mode_over"]),
                  str(stat["stats"]["flow"]["recycler"]["recycled"]), str(stat["stats"]["flow"]["recycler"]["queue_avg"]), str(stat["stats"]["flow"]["recycler"]["queue_max"]), str(stat["stats"]["flow"]["memuse"]), str(stat["stats"]["defrag"]["ipv4"]["fragments"]), str(stat["stats"]["defrag"]["ipv4"]["reassembled"]),
                  str(stat["stats"]["defrag"]["ipv6"]["fragments"]), str(stat["stats"]["defrag"]["ipv6"]["reassembled"]), str(stat["stats"]["defrag"]["max_frag_hits"]), str(stat["stats"]["flow_bypassed"]["local_pkts"]), str(stat["stats"]["flow_bypassed"]["local_bytes"]),
                  str(stat["stats"]["flow_bypassed"]["local_capture_pkts"]), str(stat["stats"]["flow_bypassed"]["local_capture_bytes"]), str(stat["stats"]["flow_bypassed"]["closed"]), str(stat["stats"]["flow_bypassed"]["pkts"]), str(stat["stats"]["flow_bypassed"]["bytes"]),
                  str(stat["stats"]["detect"]["engines"][0]["id"]), f"'{stat['stats']['detect']['engines'][0]['last_reload']}'", str(stat["stats"]["detect"]["engines"][0]["rules_loaded"]), str(stat["stats"]["detect"]["engines"][0]["rules_failed"]), str(stat["stats"]["detect"]["engines"][0]["rules_skipped"]),
                  str(stat["stats"]["detect"]["alert"]), str(stat["stats"]["detect"]["alert_queue_overflow"]), str(stat["stats"]["detect"]["alerts_suppressed"]), str(stat["stats"]["app_layer"]["flow"]["http"]), str(stat["stats"]["app_layer"]["flow"]["ftp"]), str(stat["stats"]["app_layer"]["flow"]["smtp"]),
                  str(stat["stats"]["app_layer"]["flow"]["tls"]), str(stat["stats"]["app_layer"]["flow"]["ssh"]), str(stat["stats"]["app_layer"]["flow"]["imap"]), str(stat["stats"]["app_layer"]["flow"]["smb"]), str(stat["stats"]["app_layer"]["flow"]["dcerpc_tcp"]), str(stat["stats"]["app_layer"]["flow"]["dns_tcp"]),
                  str(stat["stats"]["app_layer"]["flow"]["nfs_tcp"]), str(stat["stats"]["app_layer"]["flow"]["ntp"]), str(stat["stats"]["app_layer"]["flow"]["ftp-data"]), str(stat["stats"]["app_layer"]["flow"]["tftp"]), str(stat["stats"]["app_layer"]["flow"]["ike"]), str(stat["stats"]["app_layer"]["flow"]["krb5_tcp"]),
                  str(stat["stats"]["app_layer"]["flow"]["quic"]), str(stat["stats"]["app_layer"]["flow"]["dhcp"]), str(stat["stats"]["app_layer"]["flow"]["snmp"]), str(stat["stats"]["app_layer"]["flow"]["sip"]), str(stat["stats"]["app_layer"]["flow"]["rfb"]), str(stat["stats"]["app_layer"]["flow"]["mqtt"]),
                  str(stat["stats"]["app_layer"]["flow"]["telnet"]), str(stat["stats"]["app_layer"]["flow"]["rdp"]), str(stat["stats"]["app_layer"]["flow"]["http2"]), str(stat["stats"]["app_layer"]["flow"]["bittorrent-dht"]), str(stat["stats"]["app_layer"]["flow"]["failed_tcp"]),
                  str(stat["stats"]["app_layer"]["flow"]["dcerpc_udp"]), str(stat["stats"]["app_layer"]["flow"]["dns_udp"]), str(stat["stats"]["app_layer"]["flow"]["nfs_udp"]), str(stat["stats"]["app_layer"]["flow"]["krb5_udp"]), str(stat["stats"]["app_layer"]["flow"]["failed_udp"]),
                  str(stat["stats"]["app_layer"]["tx"]["http"]), str(stat["stats"]["app_layer"]["tx"]["ftp"]), str(stat["stats"]["app_layer"]["tx"]["smtp"]), str(stat["stats"]["app_layer"]["tx"]["tls"]), str(stat["stats"]["app_layer"]["tx"]["ssh"]), str(stat["stats"]["app_layer"]["tx"]["imap"]),
                  str(stat["stats"]["app_layer"]["tx"]["smb"]), str(stat["stats"]["app_layer"]["tx"]["dcerpc_tcp"]), str(stat["stats"]["app_layer"]["tx"]["dns_tcp"]), str(stat["stats"]["app_layer"]["tx"]["nfs_tcp"]), str(stat["stats"]["app_layer"]["tx"]["ntp"]), str(stat["stats"]["app_layer"]["tx"]["ftp-data"]),
                  str(stat["stats"]["app_layer"]["tx"]["tftp"]), str(stat["stats"]["app_layer"]["tx"]["ike"]), str(stat["stats"]["app_layer"]["tx"]["krb5_tcp"]), str(stat["stats"]["app_layer"]["tx"]["quic"]), str(stat["stats"]["app_layer"]["tx"]["dhcp"]), str(stat["stats"]["app_layer"]["tx"]["snmp"]),
                  str(stat["stats"]["app_layer"]["tx"]["sip"]), str(stat["stats"]["app_layer"]["tx"]["rfb"]), str(stat["stats"]["app_layer"]["tx"]["mqtt"]), str(stat["stats"]["app_layer"]["tx"]["telnet"]), str(stat["stats"]["app_layer"]["tx"]["rdp"]), str(stat["stats"]["app_layer"]["tx"]["http2"]),
                  str(stat["stats"]["app_layer"]["tx"]["bittorrent-dht"]), str(stat["stats"]["app_layer"]["tx"]["dcerpc_udp"]), str(stat["stats"]["app_layer"]["tx"]["dns_udp"]), str(stat["stats"]["app_layer"]["tx"]["nfs_udp"]), str(stat["stats"]["app_layer"]["tx"]["krb5_udp"]),
                  str(stat["stats"]["app_layer"]["error"]["http"]["gap"]), str(stat["stats"]["app_layer"]["error"]["http"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["http"]["parser"]), str(stat["stats"]["app_layer"]["error"]["http"]["internal"]), str(stat["stats"]["app_layer"]["error"]["ftp"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["ftp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["ftp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["ftp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["smtp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["smtp"]["alloc"]),
                  str(stat["stats"]["app_layer"]["error"]["smtp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["smtp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["tls"]["gap"]), str(stat["stats"]["app_layer"]["error"]["tls"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["tls"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["tls"]["internal"]), str(stat["stats"]["app_layer"]["error"]["ssh"]["gap"]), str(stat["stats"]["app_layer"]["error"]["ssh"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["ssh"]["parser"]), str(stat["stats"]["app_layer"]["error"]["ssh"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["imap"]["gap"]), str(stat["stats"]["app_layer"]["error"]["imap"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["imap"]["parser"]), str(stat["stats"]["app_layer"]["error"]["imap"]["internal"]), str(stat["stats"]["app_layer"]["error"]["smb"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["smb"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["smb"]["parser"]), str(stat["stats"]["app_layer"]["error"]["smb"]["internal"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_tcp"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["dcerpc_tcp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_tcp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_tcp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["dns_tcp"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["dns_tcp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["dns_tcp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["dns_tcp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["nfs_tcp"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["nfs_tcp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["nfs_tcp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["nfs_tcp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["ntp"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["ntp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["ntp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["ntp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["ftp-data"]["gap"]), str(stat["stats"]["app_layer"]["error"]["ftp-data"]["alloc"]),
                  str(stat["stats"]["app_layer"]["error"]["ftp-data"]["parser"]), str(stat["stats"]["app_layer"]["error"]["ftp-data"]["internal"]), str(stat["stats"]["app_layer"]["error"]["tftp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["tftp"]["alloc"]),
                  str(stat["stats"]["app_layer"]["error"]["tftp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["tftp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["ike"]["gap"]), str(stat["stats"]["app_layer"]["error"]["ike"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["ike"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["ike"]["internal"]), str(stat["stats"]["app_layer"]["error"]["krb5_tcp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["krb5_tcp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["krb5_tcp"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["krb5_tcp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["quic"]["gap"]), str(stat["stats"]["app_layer"]["error"]["quic"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["quic"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["quic"]["internal"]), str(stat["stats"]["app_layer"]["error"]["dhcp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["dhcp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["dhcp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["dhcp"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["snmp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["snmp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["snmp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["snmp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["sip"]["gap"]),
                  str(stat["stats"]["app_layer"]["error"]["sip"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["sip"]["parser"]), str(stat["stats"]["app_layer"]["error"]["sip"]["internal"]), str(stat["stats"]["app_layer"]["error"]["rfb"]["gap"]), str(stat["stats"]["app_layer"]["error"]["rfb"]["alloc"]),
                  str(stat["stats"]["app_layer"]["error"]["rfb"]["parser"]), str(stat["stats"]["app_layer"]["error"]["rfb"]["internal"]), str(stat["stats"]["app_layer"]["error"]["mqtt"]["gap"]), str(stat["stats"]["app_layer"]["error"]["mqtt"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["mqtt"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["mqtt"]["internal"]), str(stat["stats"]["app_layer"]["error"]["telnet"]["gap"]), str(stat["stats"]["app_layer"]["error"]["telnet"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["telnet"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["telnet"]["internal"]), str(stat["stats"]["app_layer"]["error"]["rdp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["rdp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["rdp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["rdp"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["http2"]["gap"]), str(stat["stats"]["app_layer"]["error"]["http2"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["http2"]["parser"]), str(stat["stats"]["app_layer"]["error"]["http2"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["bittorrent-dht"]["gap"]), str(stat["stats"]["app_layer"]["error"]["bittorrent-dht"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["bittorrent-dht"]["parser"]), str(stat["stats"]["app_layer"]["error"]["bittorrent-dht"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["failed_tcp"]["gap"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_udp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_udp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["dcerpc_udp"]["internal"]),
                  str(stat["stats"]["app_layer"]["error"]["dns_udp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["dns_udp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["dns_udp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["nfs_udp"]["alloc"]),
                  str(stat["stats"]["app_layer"]["error"]["nfs_udp"]["parser"]), str(stat["stats"]["app_layer"]["error"]["nfs_udp"]["internal"]), str(stat["stats"]["app_layer"]["error"]["krb5_udp"]["alloc"]), str(stat["stats"]["app_layer"]["error"]["krb5_udp"]["parser"]),
                  str(stat["stats"]["app_layer"]["error"]["krb5_udp"]["internal"]), str(stat["stats"]["app_layer"]["expectations"]), str(stat["stats"]["memcap_pressure"]), str(stat["stats"]["memcap_pressure_max"]), str(stat["stats"]["http"]["memuse"]), str(stat["stats"]["http"]["memcap"]),
                  str(stat["stats"]["ftp"]["memuse"]), str(stat["stats"]["ftp"]["memcap"]), str(stat["stats"]["file_store"]["open_files"])]

        insert_query = f"INSERT INTO stats ({', '.join(column_names)}) VALUES ({', '.join(values)});"
        # print(insert_query)
        self.cursor.execute(insert_query)
        self.conn.commit()

    def get_dashboard_data(self):
        alerts_query = self.cursor.execute("SELECT COUNT(*) FROM alerts")
        total_alerts = alerts_query.fetchone()[0]
        # print(total_alerts)

        flow_query = "SELECT COUNT(*) FROM flows"
        self.cursor.execute(flow_query)
        total_flows = self.cursor.fetchone()[0]
        # print(total_flows)

        stats_query = "SELECT COUNT(*) FROM stats"
        self.cursor.execute(stats_query)
        total_stats = self.cursor.fetchone()[0]
        # print(total_stats)

        unique_ips_query = self.cursor.execute("SELECT src_ip, COUNT(*) FROM alerts GROUP BY src_ip")
        unique_ips = [{ip: counts} for ip, counts in unique_ips_query.fetchall()]

        unique_severity_query = self.cursor.execute("SELECT alert_severity, COUNT(*) FROM alerts GROUP BY alert_severity")
        unique_severity = [{severity: counts} for severity, counts in unique_severity_query.fetchall()]
        #         print(unique_severity)

        unique_alert_cat_query = self.cursor.execute('SELECT alert_category, COUNT(*) FROM alerts GROUP BY alert_category')
        unique_alert_cat = [{alert_cat:counts} for alert_cat,counts in unique_alert_cat_query.fetchall()]
        # print(unique_severity)

        unique_alert_sig_query = self.cursor.execute('SELECT alert_signature, COUNT(*) FROM alerts GROUP BY alert_signature')
        unique_alert_sig = [{alert_sig:counts} for alert_sig,counts in unique_alert_sig_query.fetchall()]
        # print(unique_alert_sig)

        unique_sig_sev_query = self.cursor.execute('SELECT metadata_signature_severity, COUNT(*) FROM alerts GROUP BY metadata_signature_severity')
        unique_sig_sev = [{json.loads(sig_sev)[0]:counts} for sig_sev,counts in unique_sig_sev_query.fetchall()]
        # print(unique_sig_sev)

        now = datetime.now()
        hours = [(now - timedelta(hours=i)).strftime("%H:00") for i in reversed(range(24))]
        start_time = (now - timedelta(hours=23)).replace(minute=0, second=0, microsecond=0)
        start_time_str = start_time.strftime("%Y-%m-%dT%H:%M:%S")
        timestamp_query =self.cursor.execute( """
            SELECT strftime('%H:00', substr(timestamp, 12, 5)) as hour, COUNT(*)
            FROM alerts
            WHERE substr(timestamp, 1, 19) >= ?
            GROUP BY hour
            """, (start_time_str,))
        timestamp = dict(timestamp_query.fetchall())

        hourly_counts = {hour: timestamp.get(hour, 0) for hour in hours}
        # print(hourly_counts)

        total_logs = {
            "Counts": {
                "total": total_alerts + total_flows + total_stats,
                "alerts": total_alerts,
                "safe": (total_alerts + total_flows + total_stats) - total_alerts},
            "ip_counts": unique_ips,
            "severity_count":unique_severity,
            "alert_cat_count": unique_alert_cat,
            "alert_sig_count":unique_alert_sig,
            "signature_sev":unique_sig_sev,
            "timestamp":hourly_counts
        }


        return total_logs

    def get_paginated_data(self, table, page, per_page):
        offset = (page - 1) * per_page
        query = f"SELECT * FROM {table} LIMIT ? OFFSET ?"
        self.cursor.execute(query, (per_page, offset))
        rows = self.cursor.fetchall()
        return [dict(row) for row in rows]

    def get_logs_data(self):

        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 50))

        alerts = self.get_paginated_data("alerts", page, per_page)
        flows = self.get_paginated_data("flows", page, per_page)
        stats = self.get_paginated_data("stats", page, per_page)

        logs = {
            "alerts": alerts,
            "flows": flows,
            "stats": stats
        }

        return logs

